# -*- coding: utf-8 -*-
"""fire-x.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BW4_qCGFSGaG-e48FYUst5C2prE1aXyy
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.linear_model import SGDRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler

data1 = pd.read_csv('/content/fire_nrt_M-C61_386801.csv')
data2 = pd.read_csv('/content/fire_archive_M-C61_386800.csv')
data = pd.concat([data1, data2])

data.head()

data.drop(columns = 'type', inplace = True)

data['instrument'].value_counts()

data.drop(columns = 'instrument', inplace = True)

data['satellite'].value_counts()

data['satellite'] = data['satellite'].replace({'Aqua': 0, 'Terra': 1})

data['daynight'] = data['daynight'].replace({'D': 0, 'N': 1})

data['version'].value_counts()

data.drop(columns = 'version', inplace = True)

data.head()

data.describe()

columns = data.drop(columns = ['daynight', 'satellite', 'acq_date']).columns
plt.figure(figsize= (10,10))
for i in range (len(columns)):
  plt.subplot(3,3,i+1)
  plt.yticks([])
  sns.distplot(data[columns[i]])
plt.tight_layout()

cols = ['scan', 'track', 'bright_t31']

for col in cols:
    data[col] = np.log(data[col])

q1 = np.percentile(data['frp'], 25)
q3 = np.percentile(data['frp'], 75)
# print(q1, q3)
IQR = q3-q1
lwr_bound = q1-(1.5*IQR)
upr_bound = q3+(1.5*IQR)

print(upr_bound, lwr_bound)

data = data[data['frp'] < upr_bound]

data.shape

plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot= True)

data.drop(columns = 'acq_time', inplace = True)

data['acq_date'] = pd.to_datetime(data['acq_date'])

data['acq_day'] = data['acq_date'].dt.day

data['acq_year'] = data['acq_date'].dt.year

data.drop(columns = 'acq_date', inplace = True)

data.head()

X = data.drop(columns = 'brightness')
y = data['brightness']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state= 42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

model = SGDRegressor()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

r2_score(y_test, y_pred)

Rf = RandomForestRegressor()

Rf.fit(X_train, y_train)

y_pred = Rf.predict(X_test)

y_train_pred = Rf.predict(X_train)
r2_score(y_train, y_train_pred)

r2_score(y_test, y_pred)

"""**plotting on map**"""

import plotly.express as px

fig = px.scatter_mapbox(data, lat="latitude", lon="longitude", hover_data=["brightness"],
                        color_discrete_sequence=["red"], zoom=3, height=300)
fig.update_layout(mapbox_style="open-street-map")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

def get_data():
  print(x)
  return data